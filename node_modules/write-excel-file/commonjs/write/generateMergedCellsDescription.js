"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateMergedCellsDescription;

var _generateCellNumber = _interopRequireDefault(require("./generateCellNumber.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Supports "merging cells" across columns and rows.
// https://rdrr.io/cran/openxlsx/man/mergeCells.html
//
// XML example:
// `<sheetData>...</sheetData><mergeCells count="1"><mergeCell ref="A2:C3"/></mergeCells>`
//
// Configuration example:
//
// rows:
// [
//   [...],
//   [
//     { type: String, value: 'abc', span: 3, rowSpan: 2 },
//     { ... },
//     { ... }
//   ],
//   [...],
// ]
function generateMergedCellsDescription(data, _ref) {
  var schema = _ref.schema;

  if (schema) {
    return '';
  }

  var mergedCells = [];
  var rowIndex = 0;

  while (rowIndex < data.length) {
    var row = data[rowIndex];
    var columnIndex = 0;

    while (columnIndex < row.length) {
      var cell = row[columnIndex];

      if (cell) {
        var _cell$span = cell.span,
            span = _cell$span === void 0 ? 1 : _cell$span,
            _cell$rowSpan = cell.rowSpan,
            rowSpan = _cell$rowSpan === void 0 ? 1 : _cell$rowSpan;

        if (span > 1 || rowSpan > 1) {
          // Validate that `span`-ning or `rowSpan`-ning cells only overlap
          // `null` or `undefined` ones. Especially that `span`-ning or `rowSpan`-ning cells
          // don't overlap other `span`-ning or `rowSpan`-ning cells.
          validateSpanningCellsOverlap({
            data: data,
            rowIndex: rowIndex,
            columnIndex: columnIndex,
            span: span,
            rowSpan: rowSpan
          }); // Add "merged cells" entry.

          var rowNumber = rowIndex + 1;
          mergedCells.push((0, _generateCellNumber["default"])(columnIndex, rowNumber) + ':' + (0, _generateCellNumber["default"])(columnIndex + (span ? span - 1 : 0), rowNumber + (rowSpan ? rowSpan - 1 : 0)));
        }
      }

      columnIndex++;
    }

    rowIndex++;
  }

  if (mergedCells.length === 0) {
    return '';
  }

  return "<mergeCells count=\"".concat(mergedCells.length, "\">") + mergedCells.map(function (coordinates) {
    return "<mergeCell ref=\"".concat(coordinates, "\"/>");
  }).join('') + '</mergeCells>';
} // Validate that a `span`-ning / `rowSpan`-ning cell doesn't overlap
// with other cells, especially `span`-ning / `rowSpan`-ning ones,
// because those ones would make MS Office 2007 Excel say:
// "Excel found unreadable content in 'file.xlsx'.
//  Do you want to recover the contents of this workbook?
//  If you trust the source of this workbook, click Yes".


function validateSpanningCellsOverlap(_ref2) {
  var data = _ref2.data,
      rowIndex = _ref2.rowIndex,
      columnIndex = _ref2.columnIndex,
      span = _ref2.span,
      rowSpan = _ref2.rowSpan;
  var i = rowIndex;

  while (i <= rowIndex + (rowSpan - 1)) {
    var j = columnIndex;

    while (j <= columnIndex + (span - 1)) {
      var cell = data[i][j];

      if (i > rowIndex || j > columnIndex) {
        if (cell !== null && cell !== undefined) {
          throw new Error("[write-excel-file] When using `span` or `rowSpan` parameters, all hidden overlapped cells should be represented by `null`s or `undefined`s. Cell at row ".concat(rowIndex + 1, " and column ").concat(columnIndex + 1, " is configured with `span` ").concat(span, " and `rowSpan` ").concat(rowSpan, ". Cell at row ").concat(i + 1, " and column ").concat(j + 1, " is neither `null` nor `undefined`: ").concat(JSON.stringify(cell)));
        }
      }

      j++;
    }

    i++;
  }
}
//# sourceMappingURL=generateMergedCellsDescription.js.map